from aiogram import Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import ADMIN_IDS, CHANNEL_ID
from services.work_service import (
    add_category, get_categories, delete_category, get_pending_works, get_work_info,
    approve_work, reject_work, get_work_files, update_work_title, update_work_description,
    get_users_count, get_works_count, get_payout_requests, get_total_users_count,
    get_category_sales_count, update_work_category, admin_delete_work
)
from handlers.combined_handlers import get_main_menu, add_message_id, delete_previous_messages
from database import queries

# ===== FSM =====
class CategoryForm(StatesGroup):
    parent_id = State()
    name = State()

class EditWorkForm(StatesGroup):
    new_title = State()
    new_description = State()

class EditPreviewForm(StatesGroup):
    waiting_for_photo = State()

# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ =====
def is_admin(user_id: int):
    return user_id in ADMIN_IDS

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def delete_bot_messages(chat: types.Chat, msg_ids: list[int]):
    for msg_id in msg_ids:
        try:
            await chat.delete_message(msg_id)
        except:
            pass
            
# ===== –£–¥–∞–ª–µ–Ω–∏–µ success-—Å–æ–æ–±—â–µ–Ω–∏—è =====
async def delete_success_message(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    success_msg_id = data.get("success_msg_id")
    if success_msg_id:
        try:
            await callback.message.chat.delete_message(success_msg_id)
        except:
            pass
        await state.update_data(success_msg_id=None)

# ===== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å =====
async def admin_panel_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await delete_success_message(callback, state)
    await delete_previous_messages(callback, state)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories")],
        [InlineKeyboardButton(text="üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç", callback_data="admin_pending_works")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="ü¶ß –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É", callback_data="admin_payouts")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    ])
    photo = FSInputFile("image/admin.jpg")
    msg = await callback.message.answer_photo(photo=photo, caption="‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=keyboard)
    await state.update_data(last_msg_ids=[msg.message_id])

# ===== –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ =====
async def admin_categories_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await delete_success_message(callback, state)
    await delete_previous_messages(callback, state)

    categories = await get_categories()
    keyboard_buttons = []

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    main_categories = [c for c in categories if c[2] is None]
    subcategories = [c for c in categories if c[2] is not None]

    for cat_id, cat_name, _ in main_categories:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"‚ùå {cat_name}", callback_data=f"delete_category_{cat_id}")
        ])

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for sub_id, sub_name, parent_id in subcategories:
            if parent_id == cat_id:
                keyboard_buttons.append([
                    InlineKeyboardButton(text=f"   ‚Ü≥ {sub_name}", callback_data=f"delete_category_{sub_id}")
                ])

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é / –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")])
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    msg = await callback.message.answer("üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=keyboard)
    await state.update_data(last_msg_ids=[msg.message_id])

async def delete_category_handler(callback: types.CallbackQuery, state: FSMContext):
    await delete_success_message(callback, state)
    cat_id = int(callback.data.split("_")[-1])
    await delete_category(cat_id)
    await admin_categories_handler(callback, state)

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await delete_success_message(callback, state)

    categories = await get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data="parent_none")]
        ] + [
            [InlineKeyboardButton(text=name, callback_data=f"parent_{cat_id}")]
            for cat_id, name, parent_id in categories if parent_id is None
        ]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text=name, callback_data=f"parent_{cat_id}")])

    msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ '–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è'):", reply_markup=keyboard)
    await state.update_data(temp_msg_id=msg.message_id)
    await state.set_state(CategoryForm.parent_id)

async def add_category_parent(callback: types.CallbackQuery, state: FSMContext):
    await delete_success_message(callback, state)

    parent_id = None if callback.data == "parent_none" else int(callback.data.split("_")[1])
    await state.update_data(parent_id=parent_id)

    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    data = await state.get_data()
    temp_msg_id = data.get("temp_msg_id")
    if temp_msg_id:
        try:
            await callback.message.chat.delete_message(temp_msg_id)
        except:
            pass
    await state.update_data(temp_msg_id=msg.message_id)
    await state.set_state(CategoryForm.name)

async def add_category_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    parent_id = data.get("parent_id")
    name = message.text.strip()
    await add_category(name, parent_id)

    temp_msg_id = data.get("temp_msg_id")
    if temp_msg_id:
        try:
            await message.chat.delete_message(temp_msg_id)
        except:
            pass

    last_msg_ids = data.get("last_msg_ids", [])
    await delete_bot_messages(message.chat, last_msg_ids)

    msg = await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è / –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.update_data(last_msg_ids=[msg.message_id], success_msg_id=msg.message_id)
    await state.clear()

    fake_callback = types.CallbackQuery(id="0", from_user=message.from_user, chat_instance="0", message=message, data="admin_categories")
    await admin_categories_handler(fake_callback, state)

# ===== –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç =====
async def admin_pending_works(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await delete_success_message(callback, state)
    await delete_previous_messages(callback, state)

    works = await get_pending_works()
    if not works:
        msg = await callback.message.answer(
            "‚ùå –ù–µ—Ç —Ä–∞–±–æ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]])
        )
        await state.update_data(last_msg_ids=[msg.message_id])
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for work_id, title, author_id in works:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=f"{title}", callback_data=f"review_{work_id}")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")])

    msg = await callback.message.answer("üìù –†–∞–±–æ—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:", reply_markup=keyboard)
    await state.update_data(last_msg_ids=[msg.message_id])

# ===== –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π =====
def generate_all_category_buttons(categories: list[tuple], work_id: int) -> InlineKeyboardMarkup:
    buttons = []

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    main_categories = [c for c in categories if c[2] is None]
    subcategories = [c for c in categories if c[2] is not None]

    for cat_id, cat_name, _ in main_categories:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        buttons.append([
            InlineKeyboardButton(
                text=f"{cat_name}",
                callback_data=f"set_category_{work_id}_{cat_id}"
            )
        ])

        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for sub_id, sub_name, parent_id in subcategories:
            if parent_id == cat_id:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"   ‚Ü≥ {sub_name}",
                        callback_data=f"set_category_{work_id}_{sub_id}"
                    )
                ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ===== –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π =====
async def review_work(callback: types.CallbackQuery, state: FSMContext, page: int = 0, work_id: int | None = None):
    await delete_previous_messages(callback, state)

    if work_id is None:
        try:
            work_id = int(callback.data.split("_")[-1])
        except:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
            return

    work_info = await get_work_info(work_id)
    if not work_info:
        await callback.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    _, title, description, price, _, _, _, author_id, preview_image_id, _, _, status = work_info
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_delete_{work_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{work_id}")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{work_id}")],
         [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–≤—å—é", callback_data=f"edit_preview:{work_id}")],
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{work_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{work_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_pending")]
    ])

    caption_text = f"üîπ <b>{title}</b>\nüìÑ {description}\nüí∞ –¶–µ–Ω–∞: {price} RUB\n–°—Ç–∞—Ç—É—Å: {status}"

    try:
        if preview_image_id:
            if preview_image_id.startswith(("AgAC", "BQAC")):
                msg = await callback.message.answer_photo(photo=preview_image_id, caption=caption_text, reply_markup=admin_keyboard)
            else:
                photo = FSInputFile(preview_image_id)
                msg = await callback.message.answer_photo(photo=photo, caption=caption_text, reply_markup=admin_keyboard)
        else:
            photo = FSInputFile("image/catalog.jpg")
            msg = await callback.message.answer_photo(photo=photo, caption=caption_text, reply_markup=admin_keyboard)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {e}")
        return

    await state.update_data(last_msg_ids=[msg.message_id])

    try:
        files = await get_work_files(work_id)
        for file_id, _ in files:
            if file_id.startswith(("AgAC", "BQAC")):
                file_msg = await callback.message.answer_document(file_id)
                last_ids = (await state.get_data()).get("last_msg_ids", [])
                last_ids.append(file_msg.message_id)
                await state.update_data(last_msg_ids=last_ids)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç—ã: {e}")

    categories = await get_categories()
    category_keyboard = generate_all_category_buttons(categories, work_id)
    try:
        category_msg = await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=category_keyboard)
        last_ids = (await state.get_data()).get("last_msg_ids", [])
        last_ids.append(category_msg.message_id)
        await state.update_data(last_msg_ids=last_ids)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π =====
async def category_page_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        work_id = int(parts[2])
        page = int(parts[3])
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    await review_work(callback, state, page=page, work_id=work_id)

# ===== –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
async def show_subcategories(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    work_id, category_id = int(parts[2]), int(parts[3])
    categories = await get_categories()
    subcategories = [cat for cat in categories if cat[2] == category_id]

    buttons = [[InlineKeyboardButton(text=f"‚Ü≥ {sub_name}", callback_data=f"set_category_{work_id}_{sub_id}")] for sub_id, sub_name, _ in subcategories]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"review_{work_id}")])
    buttons += [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{work_id}")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{work_id}")],
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{work_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{work_id}")]
    ]
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

# ===== –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
async def set_work_category(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    work_id, category_id = int(parts[2]), int(parts[3])
    await update_work_category(work_id, category_id)
    await callback.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")

# ===== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã =====
async def start_edit_title(callback: types.CallbackQuery, state: FSMContext):
    work_id = int(callback.data.split("_")[-1])
    await state.update_data(work_id=work_id)
    msg = await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã:")
    last_ids = (await state.get_data()).get("last_msg_ids", [])
    last_ids.append(msg.message_id)
    await state.update_data(last_msg_ids=last_ids)
    await state.set_state(EditWorkForm.new_title)

async def save_new_title(message: types.Message, state: FSMContext):
    data = await state.get_data()
    work_id = data.get("work_id")
    await update_work_title(work_id, message.text.strip())
    await delete_bot_messages(message.chat, data.get("last_msg_ids", []))
    await state.clear()
    fake_callback = types.CallbackQuery(id="0", from_user=message.from_user, chat_instance="0", message=message, data=f"review_{work_id}")
    await review_work(fake_callback, state)

async def start_edit_description(callback: types.CallbackQuery, state: FSMContext):
    work_id = int(callback.data.split("_")[-1])
    await state.update_data(work_id=work_id)
    msg = await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:")
    last_ids = (await state.get_data()).get("last_msg_ids", [])
    last_ids.append(msg.message_id)
    await state.update_data(last_msg_ids=last_ids)
    await state.set_state(EditWorkForm.new_description)

async def save_new_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    work_id = data.get("work_id")
    await update_work_description(work_id, message.text.strip())
    await delete_bot_messages(message.chat, data.get("last_msg_ids", []))
    await state.clear()
    fake_callback = types.CallbackQuery(id="0", from_user=message.from_user, chat_instance="0", message=message, data=f"review_{work_id}")
    await review_work(fake_callback, state)

from config import CHANNEL_ID  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

from config import CHANNEL_ID  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

# ===== –û–¥–æ–±—Ä–µ–Ω–∏–µ / –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ =====
async def approve_work_handler(callback: types.CallbackQuery, state: FSMContext):
    work_id = int(callback.data.split("_")[-1])
    work_info = await get_work_info(work_id)
    if not work_info:
        await callback.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    title = work_info[1]
    description = work_info[2]
    price = work_info[3]
    photo_file_id = work_info[8]

    # –û–¥–æ–±—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
    await approve_work(work_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
    channel_text = f"üîπ {title}\nüìÑ {description}\nüí∞ –¶–µ–Ω–∞: {price} RUB"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å —Ñ–æ—Ç–æ
    try:
        if photo_file_id:
            await callback.message.bot.send_photo(chat_id=CHANNEL_ID, photo=photo_file_id, caption=channel_text)
        else:
            await callback.message.bot.send_message(chat_id=CHANNEL_ID, text=channel_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")

    await callback.answer("‚úÖ –†–∞–±–æ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
    await admin_pending_works(callback, state)

async def reject_work_handler(callback: types.CallbackQuery, state: FSMContext):
    work_id = int(callback.data.split("_")[-1])
    work_info = await get_work_info(work_id)
    if not work_info:
        await callback.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    _, title, *_ , author_id, _, _ = work_info
    await reject_work(work_id)
    try: await callback.message.bot.send_message(author_id, f"‚ùå –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ '{title}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except: pass
    last_ids = (await state.get_data()).get("last_msg_ids", [])
    await delete_bot_messages(callback.message.chat, last_ids)
    await state.update_data(last_msg_ids=[])
    await callback.answer("‚ùå –†–∞–±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await admin_pending_works(callback, state)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def ask_change_preview(callback: types.CallbackQuery, state: FSMContext):
    work_id = int(callback.data.split(":")[1])
    await state.update_data(work_id=work_id)
    await state.set_state(EditPreviewForm.waiting_for_photo)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å "—Å—Ç–∞—Ä—ã—Ö"
    last_msg_ids = (await state.get_data()).get("last_msg_ids", [])
    await delete_bot_messages(callback.message.chat, last_msg_ids)
    
    msg = await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é (—Ñ–æ—Ç–æ) –¥–ª—è —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã.")
    await state.update_data(last_msg_ids=[msg.message_id])

# –ü—Ä–∏—ë–º –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def change_preview(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()
    work_id = data.get("work_id")

    new_preview_id = message.photo[-1].file_id
    await queries.update_work_preview(work_id, new_preview_id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_msg_ids = data.get("last_msg_ids", [])
    await delete_bot_messages(message.chat, last_msg_ids)

    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º –ø—Ä–µ–≤—å—é
    fake_callback = types.CallbackQuery(
        id="0",
        from_user=message.from_user,
        chat_instance="0",
        message=message,
        data=f"review_{work_id}"
    )
    await review_work(fake_callback, state)

# ===== –ü—Ä–æ—á–µ–µ =====
async def go_back_to_pending(callback: types.CallbackQuery, state: FSMContext):
    last_ids = (await state.get_data()).get("last_msg_ids", [])
    await delete_bot_messages(callback.message.chat, last_ids)
    await state.update_data(last_msg_ids=[])
    await admin_pending_works(callback, state)

async def go_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback, state)
    menu = get_main_menu(callback.from_user.id)
    photo = FSInputFile("image/welcome.jpg")
    msg = await callback.message.answer_photo(photo=photo, caption="üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=menu)
    await add_message_id(msg, state)
    await callback.answer()

async def admin_stats_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await delete_previous_messages(callback, state)
    categories = await get_categories()
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
    for cat_id, cat_name, _ in categories:
        users_count = await get_users_count(cat_id)
        works_count = await get_works_count(cat_id)
        sales_count = await get_category_sales_count(cat_id)
        text += f"üìÇ <b>{cat_name}</b>\n üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}\n üìù –í—Å–µ–≥–æ —Ä–∞–±–æ—Ç: {works_count}\n üõí –ö—É–ø–ª–µ–Ω–æ —Ä–∞–±–æ—Ç: {sales_count}\n\n"
    text += f"üë§ <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:</b> {await get_total_users_count()}\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    msg = await callback.message.answer(text, reply_markup=keyboard)
    await state.update_data(last_msg_ids=[msg.message_id])

async def admin_payouts_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await delete_previous_messages(callback, state)
    requests = await get_payout_requests()
    if not requests:
        msg = await callback.message.answer("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]))
        await state.update_data(last_msg_ids=[msg.message_id])
        return
    text = "üí∞ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
    for user_id, amount in requests: text += f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | –°—É–º–º–∞: {amount} RUB\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    msg = await callback.message.answer(text, reply_markup=keyboard)
    await state.update_data(last_msg_ids=[msg.message_id])

async def admin_delete_work_handler(callback: types.CallbackQuery, state: FSMContext):
    work_id = int(callback.data.split("_")[-1])
    
    data = await state.get_data()
    last_msg_ids = data.get("last_msg_ids", [])
    await admin_delete_work(work_id)
    await delete_bot_messages(callback.message.chat, last_msg_ids)
    msg = await callback.message.answer("‚úÖ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")


    await state.update_data(last_msg_ids=[msg.message_id], success_msg_id=msg.message_id)
    fake_callback = types.CallbackQuery(
        id="0", from_user=callback.from_user, chat_instance="0",
        message=callback.message, data="admin_pending_works"
    )
    await admin_pending_works(fake_callback, state)

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ =====
def register_admin_handlers(dp: Dispatcher):
    dp.callback_query.register(ask_change_preview, lambda c: c.data.startswith("edit_preview:"))
    dp.message.register(change_preview, EditPreviewForm.waiting_for_photo)
    dp.callback_query.register(admin_delete_work_handler, F.data.startswith("admin_delete_"))
    dp.callback_query.register(admin_panel_handler, F.data == "admin_panel")
    dp.callback_query.register(admin_pending_works, F.data == "admin_pending_works")
    dp.callback_query.register(review_work, F.data.startswith("review_"))
    dp.callback_query.register(set_work_category, F.data.startswith("set_category_"))
    dp.callback_query.register(start_edit_title, F.data.startswith("edit_title_"))
    dp.message.register(save_new_title, EditWorkForm.new_title)
    dp.callback_query.register(start_edit_description, F.data.startswith("edit_description_"))
    dp.message.register(save_new_description, EditWorkForm.new_description)
    dp.callback_query.register(category_page_handler, F.data.startswith("category_page_"))
    dp.callback_query.register(approve_work_handler, F.data.startswith("approve_"))
    dp.callback_query.register(reject_work_handler, F.data.startswith("reject_"))
    dp.callback_query.register(go_back_to_pending, F.data == "go_back_pending")
    dp.callback_query.register(go_to_main_menu, F.data == "to_main_menu")
    dp.callback_query.register(admin_categories_handler, F.data == "admin_categories")
    dp.callback_query.register(delete_category_handler, F.data.startswith("delete_category_"))
    dp.callback_query.register(add_category_start, F.data == "add_category")
    dp.message.register(add_category_save, CategoryForm.name)
    dp.callback_query.register(add_category_parent, F.data.startswith("parent_"))
    dp.callback_query.register(admin_stats_handler, F.data == "admin_stats")
    dp.callback_query.register(admin_payouts_handler, F.data == "admin_payouts")
    dp.callback_query.register(show_subcategories, F.data.startswith("show_subcats_"))
