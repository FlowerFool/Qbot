from aiogram import Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from config import ADMIN_IDS, DB_NAME
from utils.subscription import check_subscription
from services.work_service import (
    get_categories,
    get_subcategories,
    get_works,
    delete_work,
    get_user_balance,
    save_work,
    get_author_stats,
    get_user_purchases,
    add_category,
    delete_category,
    get_pending_works,
    get_work_info,
    approve_work,
    reject_work,
    get_work_files,
    update_work_title,
    get_categories_with_subcategories,
    update_work_description
)
from database.queries import (
    get_user,
    create_purchase,
    update_balance,
    complete_purchase
)
from aiosqlite import connect

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è =====
class WorkForm(StatesGroup):
    category = State()
    title = State()
    description = State()
    price = State()
    preview = State()
    files = State()
    confirm = State()

class EditWorkForm(StatesGroup):
    new_title = State()
    new_description = State()

class CategoryForm(StatesGroup):
    name = State()

class DepositForm(StatesGroup):
    amount = State()

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
def is_admin(user_id: int):
    return user_id in ADMIN_IDS

async def add_message_id(msg, state: FSMContext):
    data = await state.get_data()
    last_msg_ids = data.get("last_msg_ids", [])
    last_msg_ids.append(msg.message_id)
    await state.update_data(last_msg_ids=last_msg_ids)

async def delete_previous_messages(callback_or_message, state: FSMContext):
    data = await state.get_data()
    last_msg_ids = data.get("last_msg_ids", [])
    bot = callback_or_message.bot
    chat_id = callback_or_message.from_user.id
    for msg_id in last_msg_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
        except:
            pass
    await state.update_data(last_msg_ids=[])

async def delete_bot_messages(chat: types.Chat, msg_ids: list[int]):
    for msg_id in msg_ids:
        try:
            await chat.delete_message(msg_id)
        except:
            pass

async def go_main_from_success(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await main_menu(callback, state)

async def go_main_from_error(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await main_menu(callback, state)

async def subscribed_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    bot = callback.bot

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(user_id, bot)
    if is_subscribed:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        try:
            await callback.message.delete()
        except:
            pass
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(callback, state)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–Ø –ø–æ–¥–ø–∏—Å–∞–Ω", –Ω–æ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# ===== –ú–µ–Ω—é =====
def get_main_menu(user_id: int):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç", callback_data="catalog")],
        [InlineKeyboardButton(text="‚ûï –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="add_work")],
        [InlineKeyboardButton(text="üé© –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_menu")]  # <- –∑–¥–µ—Å—å
    ])
    if user_id in ADMIN_IDS:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="ü™¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="ai_settings")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return keyboard

def get_profile_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_deposit")],
        [InlineKeyboardButton(text="üè¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É", callback_data="profile_withdraw_request")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="profile_balance")],
        [InlineKeyboardButton(text="üìù –ú–æ–∏ —Ä–∞–±–æ—Ç—ã", callback_data="profile_works")],
        [InlineKeyboardButton(text="üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="profile_purchases")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
async def start(message: types.Message, state: FSMContext):
    await delete_previous_messages(message, state)
    await state.clear()
    menu = get_main_menu(message.from_user.id)
    photo = FSInputFile("image/welcome.jpg")
    msg = await message.answer_photo(
        photo=photo,
        caption="üìö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –∏ –ø–æ–∫—É–ø–∞—Ç—å —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=menu
    )
    await add_message_id(msg, state)

async def main_menu(callback_or_message, state: FSMContext):
    await delete_previous_messages(callback_or_message, state)
    await state.clear()
    if isinstance(callback_or_message, types.CallbackQuery):
        chat_id = callback_or_message.from_user.id
        menu = get_main_menu(chat_id)
        photo = FSInputFile("image/welcome.jpg")
        msg = await callback_or_message.message.answer_photo(
            photo=photo,
            caption="üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
            reply_markup=menu
        )
        await add_message_id(msg, state)
        await callback_or_message.answer()
    else:
        await start(callback_or_message, state)

# ===== –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ =====
async def deposit_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user = await get_user(user_id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (RUB):")
    await state.set_state(DepositForm.amount)

# ===== –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ =====
async def deposit_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        return

    user_id = message.from_user.id
    await update_balance(user_id, amount)

    # –ö–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    msg = await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB.", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    await add_message_id(message, state)  # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π
    await add_message_id(msg, state)      # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ‚úÖ

# ===== –ö–∞—Ç–∞–ª–æ–≥ =====
async def catalog_handler(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback, state)

    categories = await get_categories_with_subcategories()

    if not categories:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
        msg = await callback.message.answer("üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", reply_markup=keyboard)
        await add_message_id(msg, state)
        return

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard_buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"category_{cat_id}_1_root")]
        for cat_id, name, subcats in categories
        if not any(sc for sc in subcats) or True  # –ø—Ä–æ—Å—Ç–æ –≤—Å–µ –≤–µ—Ä—Ö–Ω–∏–µ
    ]

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    photo = FSInputFile("image/catalog.jpg")
    msg = await callback.message.answer_photo(
        photo=photo,
        caption="üìÇ <b>–ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await add_message_id(msg, state)
    await callback.answer()

async def category_handler(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback, state)

    parts = callback.data.split("_")
    category_id = int(parts[1])
    page = int(parts[2]) if len(parts) > 2 else 1
    is_root = len(parts) > 3 and parts[3] == "root"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = await get_subcategories(category_id)

    if subcategories:  # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=sub_name, callback_data=f"category_{sub_id}_1")]
                for sub_id, sub_name in subcategories
            ] + [
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")],
            ]
        )
        msg = await callback.message.answer(f"üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)
        await add_message_id(msg, state)
        await callback.answer()
        return

    # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã
    works = await get_works(category_id)
    if not works:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")],
                             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
        photo = FSInputFile("image/catalog.jpg")
        msg = await callback.message.answer_photo(
            photo=photo,
            caption="‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.",
            reply_markup=keyboard
        )
        await add_message_id(msg, state)
        return

    # –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    page_size = 3
    total_pages = max((len(works) + page_size - 1) // page_size, 1)
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    current_works = works[start_idx:end_idx]

    for work in current_works:
        work_id, title, description, price, author_income, cat_id, subcategory_id, author_id, preview_image_id = work
        if not preview_image_id:
            continue
        caption = f"üîπ <b>{title}</b>\nüìÑ {description}\nüí∞ –¶–µ–Ω–∞: {price} RUB\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_work_{work_id}")]])
        msg = await callback.message.answer_photo(photo=preview_image_id, caption=caption, reply_markup=keyboard)
        await add_message_id(msg, state)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category_id}_{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"category_{category_id}_{page+1}"))
    nav_buttons.append(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    nav_keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
    nav_msg = await callback.message.answer(f"üìë –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}", reply_markup=nav_keyboard)
    await add_message_id(nav_msg, state)
    await callback.answer()

# ===== –ü–æ–∫—É–ø–∫–∞ —Ä–∞–±–æ—Ç—ã =====
SERVICE_USER_ID = 1  # –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç

async def buy_work_handler(callback: types.CallbackQuery):
    work_id = int(callback.data.split("_")[-1])
    buyer_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    buyer = await get_user(buyer_id)
    if not buyer:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—É
    work = await get_work_info(work_id)
    if not work:
        await callback.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    price = work['price'] if isinstance(work, dict) else work[3]
    author_id = work['author_id'] if isinstance(work, dict) else work[7]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    buyer_balance = buyer[2]  # balance ‚Äî —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü
    if buyer_balance < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    purchase_id = await create_purchase(work_id, buyer_id, price)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–ª–∞—Ç—É –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–æ–º –∏ —Å–µ—Ä–≤–∏—Å–æ–º
    author_share = price * 0.7
    service_share = price - author_share

    async with connect(DB_NAME) as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE id=?", (author_share, author_id))
        await db.execute("UPDATE users SET balance = balance + ? WHERE id=?", (service_share, SERVICE_USER_ID))
        await db.execute("UPDATE users SET balance = balance - ? WHERE id=?", (price, buyer_id))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã
        await db.execute(
            "UPDATE works SET times_sold = times_sold + 1, total_earnings = total_earnings + ? WHERE id=?",
            (price, work_id)
        )
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ–∫—É–ø–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
        await db.execute("UPDATE purchases SET status='completed' WHERE id=?", (purchase_id,))
        await db.commit()

    await callback.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\nüí∞ –ê–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª {author_share} RUB\nüõ† –°–µ—Ä–≤–∏—Å: {service_share} RUB", show_alert=True)

# ===== –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É  =====
async def withdraw_request_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # —Ç–∏—Ö–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ, –±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞

# ===== –ü—Ä–æ—Ñ–∏–ª—å =====
async def profile_handler(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback, state)
    user_id = callback.from_user.id
    text = ""
    keyboard = None  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if callback.data == "profile_menu":
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        text = "üé© –ü—Ä–æ—Ñ–∏–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = get_profile_menu()

    elif callback.data == "profile_balance":
        # –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        balance = await get_user_balance(user_id)
        stats = await get_author_stats(user_id)
        total_earnings = sum(work['author_income'] * work['times_sold'] for work in stats['works'])
        text = (
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} RUB\n\n"
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ—Ç: {total_earnings} RUB\n"
            f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {stats['total_times_sold']}\n"
        )
        keyboard = get_profile_menu()

    elif callback.data == "profile_works":
        stats = await get_author_stats(user_id)
        if not stats['works']:
            text = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç."
            keyboard = get_profile_menu()
        else:
            text = "üìù –í–∞—à–∏ —Ä–∞–±–æ—Ç—ã:\n"
            buttons = []
            for work in stats['works']:
                text += f"üîπ {work['title']} ‚Äî {work['author_income']*work['times_sold']} RUB –¥–æ—Ö–æ–¥\n"
                buttons.append([InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å '{work['title']}'",
                    callback_data=f"delete:{work['id']}"
                )])
            buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    elif callback.data == "profile_purchases":
        purchases = await get_user_purchases(user_id)
        if not purchases:
            text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç."
        else:
            text = "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏:\n"
            for p in purchases:
                text += (
                    f"üîπ {p['title']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {p['price']} RUB\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {p['author_name']}\n"
                    f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {p['amount']} RUB\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {p['status']}\n\n"
                )
        keyboard = get_profile_menu()

    elif callback.data == "profile_withdraw_request":
        await callback.answer()
        return

    elif callback.data == "profile_deposit":
        await delete_previous_messages(callback, state)  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.answer()
        msg = await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (RUB):")
        await add_message_id(msg, state)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(DepositForm.amount)
        return  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è

    if keyboard is None:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    photo = FSInputFile("image/profile.jpg")
    msg = await callback.message.answer_photo(photo=photo, caption=text, reply_markup=keyboard)
    await add_message_id(msg, state)
    await callback.answer()

# ===== –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã =====
async def delete_work_handler(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data.startswith("delete:"):
        return

    try:
        work_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ä–∞–±–æ—Ç—ã.", show_alert=True)
        return

    user_id = callback.from_user.id
    # –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç—É
    success = await delete_work(work_id, user_id)
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã"
    stats = await get_author_stats(user_id)
    works = stats['works']

    if not works:
        text = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        text = "üìù –í–∞—à–∏ —Ä–∞–±–æ—Ç—ã:\n"
        keyboard_buttons = []
        for work in works:
            text += f"üîπ {work['title']} ‚Äî {work['author_income']*work['times_sold']} RUB –¥–æ—Ö–æ–¥\n"
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å '{work['title']}'",
                callback_data=f"delete:{work['id']}"
            )])
        keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer("‚úÖ –†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")

# ===== –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã =====
async def add_work_start(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback, state)
    
    categories = await get_categories()  # [(id, name, parent_id), ...]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (parent_id is None)
    top_categories = [(cat_id, name) for cat_id, name, parent_id in categories if parent_id is None]

    if not top_categories:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
        msg = await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=keyboard)
        await add_message_id(msg, state)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"select_cat_{cat_id}")] 
                         for cat_id, name in top_categories]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    photo = FSInputFile("image/become_avtor.jpg")
    msg = await callback.message.answer_photo(
        photo=photo,
        caption="üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã:",
        reply_markup=keyboard
    )
    await add_message_id(msg, state)
    await state.set_state(WorkForm.category)
    await callback.answer()

# ===== –≠—Ç–∞–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã =====
async def work_category(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback, state)
    cat_id = int(callback.data.split("_")[-1])
    await state.update_data(category_id=cat_id)
    await state.set_state(WorkForm.title)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    photo = FSInputFile("image/become_avtor.jpg")
    msg = await callback.message.answer_photo(photo=photo, caption="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)
    await add_message_id(msg, state)
    await callback.answer()

async def work_title(message: types.Message, state: FSMContext):
    await delete_previous_messages(message, state)
    await state.update_data(title=message.text)
    await state.set_state(WorkForm.description)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    photo = FSInputFile("image/become_avtor.jpg")
    msg = await message.answer_photo(photo=photo, caption="üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)
    await add_message_id(msg, state)

async def work_description(message: types.Message, state: FSMContext):
    await delete_previous_messages(message, state)
    await state.update_data(description=message.text)
    await state.set_state(WorkForm.price)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    photo = FSInputFile("image/become_avtor.jpg")
    msg = await message.answer_photo(photo=photo, caption="üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)
    await add_message_id(msg, state)

async def work_price(message: types.Message, state: FSMContext):
    await delete_previous_messages(message, state)
    try:
        price = int(message.text)
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=keyboard)
        await add_message_id(msg, state)
        return
    await state.update_data(price=price)
    await state.set_state(WorkForm.preview)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    msg = await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–≤—å—é —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ç–æ):", reply_markup=keyboard)
    await add_message_id(msg, state)

async def work_preview(message: types.Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.photo:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ.", reply_markup=keyboard)
        await add_message_id(msg, state)
        return
    preview_file_id = message.photo[-1].file_id
    await state.update_data(preview=preview_file_id)
    await state.set_state(WorkForm.files)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    msg = await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–∞–±–æ—Ç—ã. –ü–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=keyboard)
    await add_message_id(msg, state)

async def work_files(message: types.Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.document:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.", reply_markup=keyboard)
        await add_message_id(msg, state)
        return

    data = await state.get_data()
    files = data.get("files", [])
    files.append({"file_id": message.document.file_id, "file_name": message.document.file_name})
    await state.update_data(files=files)

    work_data = {
        "title": data.get("title"),
        "description": data.get("description"),
        "price": data.get("price"),
        "category_id": data.get("category_id"),
        "subcategory_id": None,
        "preview": data.get("preview"),
        "files": [(f["file_id"], f["file_name"]) for f in files]
    }
    author_id = message.from_user.id

    try:
        await save_work(author_id, work_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_from_success")]])
        msg = await message.answer("‚úÖ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)
    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_from_error")]])
        msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard)
        print("–û—à–∏–±–∫–∞ save_work:", e)

    await state.set_data({})

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ =====
def register_handlers(dp: Dispatcher):
    dp.message.register(start, Command("start"))
    dp.callback_query.register(main_menu, lambda c: c.data == "main_menu")
    dp.callback_query.register(catalog_handler, lambda c: c.data == "catalog")
    dp.callback_query.register(category_handler, lambda c: c.data.startswith("category_"))
    dp.callback_query.register(profile_handler, lambda c: c.data.startswith("profile_"))
    dp.callback_query.register(add_work_start, F.data == "add_work")
    dp.callback_query.register(buy_work_handler, lambda c: c.data.startswith("buy_work_"))
    dp.callback_query.register(work_category, lambda c: c.data.startswith("select_cat_"))
    dp.callback_query.register(go_main_from_success, F.data == "go_main_from_success")
    dp.callback_query.register(go_main_from_error, F.data == "go_main_from_error")
    dp.message.register(work_title, WorkForm.title)
    dp.message.register(work_description, WorkForm.description)
    dp.message.register(work_price, WorkForm.price)
    dp.message.register(work_preview, WorkForm.preview)
    dp.message.register(work_files, WorkForm.files)
    dp.callback_query.register(withdraw_request_handler, lambda c: c.data == "profile_withdraw_request")
    dp.callback_query.register(delete_work_handler, lambda c: c.data.startswith("delete:"))
    dp.message.register(deposit_amount, DepositForm.amount)
    dp.callback_query.register(profile_handler, lambda c: c.data.startswith("profile_"))
    dp.message.register(deposit_amount, DepositForm.amount)
    dp.callback_query.register(subscribed_callback_handler, lambda c: c.data == "subscribed")
